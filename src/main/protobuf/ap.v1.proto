syntax = "proto3";

option java_multiple_files = true;
option java_package = "dads.v1.transport.grpc.v1";
option java_outer_classname = "ApProto";

service DadsClientService {
  rpc GetSourceInfo(SourceInfoReq) returns (SourceInfoRsp) {}
}

service DadsServerService {
  rpc GetMeasurements(MeasurementsReq) returns (MeasurementsRsp) {}
  rpc InvalidateSources(InvalidateCacheReq) returns (InvalidateCacheRsp) {}
}

// Root packet DADS -> AP.
message SourceInfoReq {
  repeated string sourceIds = 1;
}

// Root packet AP -> DADS.
message SourceInfoRsp {
  repeated SourceInfo sourceInfos = 1;
  // The source should always exist. However it may be possible the DADS got a sourceId which just got deleted.
  // When that happens, the DADS may log it and drop the data.
  repeated string nonexistentSourceIds = 2;
}

message SourceInfo {
  string sourceId = 1;
  // Represents the expected data type of the measurement values.
  // The ACMS is responsible for delivering the values in the correct data type.
  string dataType = 2; // Values: decimal. New data types will be added in the future. Relevant for: Realtime, NotCumulative.
  TimeSlicer timeSlicer = 3; // Relevant for: NotCumulative.
  uint32 realtimeTtl = 4; // Time To Live in seconds. Relevant for: Realtime.
  Origin origin = 5;
  bool storeRealtime = 6;
  bool storeCumulative = 7;
  bool storeNotCumulative = 8;
  // This field holds which data source is expected so it can be determined how to process it using hardcoded (legacy) definitions.
  CumulativeSource cumulativeSource = 9;
}

message Origin {
  string originName = 1;
  string physicalQuantity = 2; // The physical quantity which the measurement data represents. Eg. power, mass, energy, etc.
}

enum TimeSlicer {
  sec10 = 0;
  min1 = 1;
  min5 = 2;
  min15 = 3;
  hour1 = 4;
  day1 = 5;
  week1 = 6;
  month1 = 7;
  year1 = 8;
}

enum CumulativeSource {
  Unsupported = 0; // This data can not be processed by the cumulative profile.
  Electricity = 1; // Micro watt hour <-> kWh
  Gas = 2; // mm3 <-> m3
  Heat = 3; // J <-> GJ
}


// Root packet Any Service -> DADS.
// Request measurement data.
message MeasurementsReq {
  int32 startTime = 1;
  int32 endTime = 2;
  string dataType = 3;
  // The time slicer as requested by the client. Only required for cumulative and not cumulative profile.
  // Does NOT represent how the data is stored but how the client wants it to be read.
  TimeSlicer timeSlicer = 4;
  Origin origin = 5;
  // The unit the DADS should convert the data to (if necessary).
  // Unit format must be parsable by squants library.
  string representationUnit = 6;

  StorageType storageProfile = 7;
  repeated SourceQuery sourceQueries = 8;
  repeated AggregationQuery aggregationQueries = 9;

  // This field holds which data source is expected so it can be determined how to process it using hardcoded (legacy) definitions.
  CumulativeSource cumulativeSource = 10;
}

message SourceQuery {
  string sourceId = 1;
  repeated SourceUnitHistory unitHistory = 2;
}

message AggregationQuery {
  string id = 1; // Generated by AP. Can be used as 'sourceId' in the response.
  string aggregation = 2; // String formula containing sourceIds, +, -, *, /, (, ).
  // The sources included in the aggregation. These sources do not need to be included in the response.
  repeated SourceQuery sources = 3;
}

enum StorageType {
  Realtime = 0;
  Cumulative = 1;
  NotCumulative = 2;
}

message SourceUnitHistory {
  int32 firstSeen = 1; // Seconds epoch UTC.
  string unit = 2; // Unit parsable by the squants library.
}

// Root packet DADS -> Any Service.
message MeasurementsRsp {
  repeated MeasurementsResults results = 1;
  GenericError error = 2; // Optional field.
}

message MeasurementsResults {
  string sourceId = 1;
  repeated MeasurementsValues values = 2;
}

message MeasurementsValues {
  uint64 timestamp = 1; // Milliseconds epoch UTC.
  MultiType value = 2;
  uint64 exactTime = 3; // Optional field only relevant for NotCumulative profile.
}

message MultiType {
  oneof value {
    bool bool = 1;
    string string = 2;
    bytes bytes = 3;
    string decimal = 4; // Represent a decimal as a string in US locale (using a dot to represent floating point).
  }
}

// Root packet Any Service -> DADS.
// Invalidate all caches related to given sourceId's.
message InvalidateCacheReq {
  repeated string sourceIds = 1;
}

// Root packet DADS -> Any Service.
message InvalidateCacheRsp {
  // Message is empty on success.
  GenericError error = 2; // Optional field.
}

message GenericError {
  // We could define some global error codes where the requester can act on.
  // Proposal: 0=Unknown, 1=Request rejected/invalid, 2=Request fields failed validation, 3=Application error
  // With any value starting from 100 being API specific.
  uint32 errorCode = 1;
  string errorMsg = 2; // Debug message.
}


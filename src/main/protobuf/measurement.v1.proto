syntax = "proto3";

option java_multiple_files = true;
option java_package = "dads.v1.transport.grpc.v1";
option java_outer_classname = "MeasurementProto";

/*
Message primitives:

Ind - Indication - Issued by the service-provider to the target service-user to indicate that a procedure has been invoked by its peer.
Cnf - Confirm    - Issued by the target service-user to the service-provider at the completion of the procedure previously invoked by an indication.
Req - Request    - Issued by the origin to the service-provider in order to invoke some procedure.
Rsp - Response   - Issued by the service-provider to the origin service-user to complete the procedure previously invoked by a request.
*/

service MeasurementService {
  rpc Process (MeasurementDataInd) returns (MeasurementDataCnf) {}
}

// Root packet ACMS/ODA -> DADS
// MeasurementData sent to the DADS for processing.
message MeasurementDataInd {
  string messageId = 1; // Generated by the ACMS. Must be sent back in the Cnf.
  DeviceIdentity device = 2;
  repeated MeasurementData measurements = 3;
}

// Root packet DADS -> ACMS/ODA
// Let the data provider know the data will be processed.
message MeasurementDataCnf {
  string messageId = 1; // As received in the Ind.
}


message DeviceIdentity {
  DeviceType type = 1; // No protobuf enum. // Current values are: 0=Unknown, 1=ALD, 2=ODA
}

message DeviceType {
  uint32 type = 1;
}

message MeasurementData {
  string sourceId = 1;
  uint32 seqNr = 2;
  string unit = 3; // In a format parsable by the squants library.
  repeated MeasurementValues data = 4;
}

message MeasurementValues {
  uint32 timestamp = 1; // UTC in seconds epoch.
  MultiType value = 2;
}

message MultiType {
  oneof value {
    bool bool = 1;
    string string = 2;
    bytes bytes = 3;
    string decimal = 4; // Represent a decimal as a string in US locale (using a dot to represent floating point).
  }
}
